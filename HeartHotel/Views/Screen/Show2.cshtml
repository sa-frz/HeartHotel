@{
    ViewData["Title"] = ViewBag.ProgramName;
    var ProgramConductors = ViewBag.ProgramConductors;
    var ProgramConductorsId = ViewBag.ProgramConductorsId;
    var pc = Html.Raw(System.Text.Json.JsonSerializer.Serialize(ProgramConductors, new
    System.Text.Json.JsonSerializerOptions
    { ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve }));
}

<div class="w-100 bg-white position-absolute end-0 top-0 vh-100 ltr d-flex justify-content-center align-items-center"
    style="z-index: 1;">
    <div class="m-4 w-100 text-center">
        <h1 class="lecture-title text-primary d-none">@ViewBag.ProgramName</h1>
        <div class="mx-4">

            @* <img src="@(Model.EventsPerson.Person?.Image != null ? "https://eventis.ir/files/" + Model.EventsPerson.Person?.Image : "/img/noperson.jpg")"
                class="card-img-top"> *@
            <div class="w-100 text-center fw-bold text-truncate adjustFontSizeToFit" id="Name"></div>

            <p class="text-justify mt-3 fs-2" id="Description"></p>
        </div>
        <div class="text-start w-100 position-fixed bottom-0 start-0 p-4 bg-white fs-5"><span id="time"></span></div>
    </div>
</div>

@section scripts {
    <script src="~/lib/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="~/js/show-old.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function () {
            if ('@(ProgramConductorsId == 0)' == 'True') {
                $.alert('زمان برگزاری به پایان رسیده است!');
                return;
            }
            getProgramConductors(@pc);
            adjustFontSizeToFit();

            // SignalR connection setup
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/signalrHub")
                .build();

            connection.on("OnConnected", (connectionId) => {
                // console.log("Connected with ID:", connectionId);
                $.post(`/api/SignalR/group/add/${connectionId}/Show2@(ViewBag.Id)`)
                    .done(function (response) {
                        console.log("Connection ID added to a group");
                    })
                    .fail(function (error) {
                        console.error("Error sending connection ID to server:", error);
                    });
            });

            connection.start()
                .then(() => console.log("Connection started"))
                .catch(err => console.error("Error while starting connection:", err));

            connection.on("ReceiveMessage", function (message) {
                console.log("New message received: ", message);
                if (message == "Reload") {
                    console.log("برنامه جدیدی برای این روز ثبت شده است");
                    window.location.reload();
                } else {
                    window.location.href = message;
                }
                // $.alert("New message received: " + message);
                // You can add logic here to update the UI or notify the user
            });

            connection.onclose(() => {
                reconnectTimer = setInterval(() => {
                    connection.start()
                        .then(() => {
                            console.log("Reconnected");
                            clearInterval(reconnectTimer); // Stop the timer once reconnected
                        })
                        .catch(err => console.error("Error while reconnecting:", err));
                }, 5000); // Retry every 5 seconds
            });

            // اجرا هنگام بارگذاری صفحه و تغییر اندازه صفحه
            document.addEventListener('DOMContentLoaded', () => adjustFontSizeToFit());
            window.addEventListener('resize', () => adjustFontSizeToFit());
        });
    </script>
}