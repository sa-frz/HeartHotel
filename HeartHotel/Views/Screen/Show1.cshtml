@{
    ViewData["Title"] = ViewBag.ProgramName;
    var ProgramConductors = ViewBag.ProgramConductors;
    var Chairs = ((IEnumerable<dynamic>)ViewBag.ProgramChairs).ToList();
    var ProgramChairs = Chairs.Where(x => x.RoleId == 1).ToList();
    var ProgramModerators = Chairs.Where(x => x.RoleId == 2).ToList();
    var ProgramConductorsId = ViewBag.ProgramConductorsId;
    var pc = Html.Raw(System.Text.Json.JsonSerializer.Serialize(ProgramConductors, new
    System.Text.Json.JsonSerializerOptions
    { ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve }));
}


<div class="w-100 bg-white position-absolute end-0 top-0 vh-100 ltr"
    style="z-index: 1;">
    <div class="text-center text-primary w-100 position-fixed top-0 start-0 p-2" style="z-index: 2;">

        <div class="d-flex justify-content-around align-items-center m-1">
            <div><img src="/img/HHicon.png" draggable="false" style="height: 60px;"></div>
            <div class="w-100 fs-1 fw-bold">10th Iranian Joint Cardiovascular Congress</div>
            @* <div><img src="/img/ghalb.png" draggable="false" style="height: 60px;"></div> *@
            <div class="fs-3 fw-bold text-nowrap">@ViewBag.HallName</div>
        </div>
        <div class="d-flex align-items-center justify-content-around w-100 bg-warning mb-3 rounded-3 p-2">
            <div class="fs-2 fw-bold text-black">@ViewData["Title"]</div>
        </div>

    </div>

    <div class="w-100 fs-2" style="margin-top: 163px;">
        @* <p id="sessionName" class="text-primary fs-1 fw-bold mb-2">@ViewData["Title"]</p> *@

        <div class="mx-3">
            <div class="d-flex gap-1 flex-wrap align-items-center">
                <div class="text-secondary fw-bold">Chairs: </div>
                @foreach (var item in ProgramChairs)
                {
                    <div>@item.Name@(item != ProgramChairs[ProgramChairs.Count - 1] ? ", ": "") </div>
                }
            </div>

            <div class="d-flex gap-1 flex-wrap align-items-center mt-2">
                <div class="text-secondary fw-bold">Moderators: </div>
                @foreach (var item in ProgramModerators)
                {
                    <div>@item.Name@(item != ProgramModerators[ProgramModerators.Count - 1] ? ", ": "") </div>
                }
            </div>

            <div class="text-secondary fw-bold mt-2">Presentations:</div>
            <div class="me-5">
                <table class="table table-striped">
                    <tbody id="oldPrograms"></tbody>
                </table>
            </div>

            <div class="my-3">
                <div class="align-items-center justify-content-center d-flex gap-2">
                    <div class="mx-2">
                        <div class="live-indicator">
                            <span class="red-dot"></span>
                        </div>
                    </div>
                    <div class="lecture-container colored w-100">
                        <div class="lecture-details">
                            @* <h1 class="lecture-title">@ViewBag.ProgramName</h1> *@
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="fs-1" id="Name"></div>
                                <div><span id="times"></span></div>
                            </div>
                            <p id="Description" style="margin-bottom: 0rem;"></p>
                            <div class="d-flex justify-content-around align-items-center d-none"><span
                                    id="time">0:00:00</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="me-5">
                <table class="table table-striped">
                    <tbody id="nextPrograms"></tbody>
                </table>
            </div>

        </div>


    </div>
    @* <div class="text-center bg-secondary text-white w-100 position-fixed bottom-0 start-0 border-top p-2"
        style="z-index: 2;">
        <div class="d-flex">
            <div class="d-flex align-items-center fw-bold gap-1">
                <i class="fa fa-clock"> </i><span id="clock"></span>
            </div>
            <div class="w-100">10th Iranian Joint Cardiovascular Congress</div>
        </div>
    </div> *@
</div>

@section scripts {
    <script src="~/lib/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="~/js/show.js"></script>
    <script>
        $(document).ready(function () {
            @* if ('@(ProgramConductorsId == 0)' == 'True') {
                $.alert('زمان برگزاری به پایان رسیده است!');
                return;
            } *@
                getProgramConductors(@pc);
            //adjustFontSizeToFit("sessionName");

            // SignalR connection setup
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/signalrHub")
                .build();

            connection.on("OnConnected", (connectionId) => {
                // console.log("Connected with ID:", connectionId);
                $.post(`/api/SignalR/group/add/${connectionId}/Show1@(ViewBag.Id)`)
                    .done(function (response) {
                        console.log("Connection ID added to a group");
                    })
                    .fail(function (error) {
                        console.error("Error sending connection ID to server:", error);
                    });
            });

            connection.start()
                .then(() => console.log("Connection started"))
                .catch(err => console.error("Error while starting connection:", err));

            connection.on("ReceiveMessage", function (message) {
                console.log("New message received: ", message);
                if (message == "Reload") {
                    console.log("برنامه جدیدی برای این روز ثبت شده است");
                    window.location.reload();
                } else {
                    window.location.href = message;
                }
                // $.alert("New message received: " + message);
                // You can add logic here to update the UI or notify the user
            });

            connection.onclose(() => {
                reconnectTimer = setInterval(() => {
                    connection.start()
                        .then(() => {
                            console.log("Reconnected");
                            clearInterval(reconnectTimer); // Stop the timer once reconnected
                        })
                        .catch(err => console.error("Error while reconnecting:", err));
                }, 5000); // Retry every 5 seconds
            });
        });
    </script>
}