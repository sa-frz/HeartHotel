@{
    Layout = "~/Views/Shared/_LayoutFull.cshtml";
    ViewData["Title"] = "Screen Monitor";
}

<div class="d-flex flex-column justify-content-center align-items-center vh-100">
    <div id="content" class="w-100 text-center fw-bold text-truncate adjustFontSizeToFit"
        style="font-size: 100px !important;"></div>
    <i id="icon" class="" style="font-size: 20rem;"></i>
    <img src="" class="d-none" />
</div>

<div class="w-100 bg-white position-absolute end-0 top-0 vh-100 ltr d-none flex-column align-items-center"
    style="z-index: 1000;" id="screenSaverOverlay">
</div>

@section scripts {
    <script src="~/lib/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="~/js/show.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function () {
            $('#content').html('@ViewBag.content');

            $('#icon').removeClass();
            $('#icon').addClass(`fa-solid fa-arrow-@ViewBag.icon`);

            adjustFontSizeToFit();
            getSlideShow();

            // SignalR connection setup
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/signalrHub")
                .build();

            connection.on("OnConnected", (connectionId) => {
                // console.log("Connected with ID:", connectionId);
                $.post(`/api/SignalR/group/add/${connectionId}/monitor${@ViewBag.Id}`)
                    .done(function (response) {
                        console.log("Connection ID added to a group");
                    })
                    .fail(function (error) {
                        console.error("Error sending connection ID to server:", error);
                    });
            });

            connection.start()
                .then(() => console.log("Connection started"))
                .catch(err => console.error("Error while starting connection:", err));

            connection.on("ReceiveMessage", function (message) {
                console.log("New message received: ", message);
                if (message == "Reload" || message == "Change") {
                    window.location.reload();
                } else if (message == "Screen Saver") {
                    showScreenSaver();
                }
            });

            connection.onclose(() => {
                reconnectTimer = setInterval(() => {
                    connection.start()
                        .then(() => {
                            console.log("Reconnected");
                            clearInterval(reconnectTimer); // Stop the timer once reconnected
                        })
                        .catch(err => console.error("Error while reconnecting:", err));
                }, 5000); // Retry every 5 seconds
            });
        });

        var currentIndex;
        function getSlideShow() {
            $.get('/api/screen/slideshow')
                .done(function (response) {
                    $('#screenSaverOverlay').html(response);
                    showSlide(0); // Show the first slide initially
                    setInterval(nextSlide, 7000); // Change slide every 7 seconds
                    currentIndex = 0;
                });
        }

        function showSlide(index) {
            var $slides = $('.slideshow-container .mySlides');
            $slides.each(function (i) {
                $(this).attr('class', (i === index) ? 'mySlides fade position-absolute top-0 show w-100 vh-100 end-0' : 'mySlides fade position-absolute top-0');
            });
        }

        function nextSlide() {
            var $slides = $('.slideshow-container .mySlides');
            currentIndex = (currentIndex + 1) % $slides.length;
            showSlide(currentIndex);
        }
    </script>
}